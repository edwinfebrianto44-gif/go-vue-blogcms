{
  "info": {
    "name": "BlogCMS API",
    "description": "A comprehensive Blog Content Management System API built with Go and Gin framework.\n\nThis collection includes all endpoints for managing blog posts, categories, comments, and users with role-based access control and JWT authentication.\n\n## Authentication\nMost endpoints require JWT authentication. After logging in, the token will be automatically set for subsequent requests.\n\n## Variables\n- `base_url`: API base URL (default: http://localhost:8080/api/v1)\n- `access_token`: JWT access token (automatically set after login)\n- `user_id`: Current user ID\n- `post_id`: Sample post ID for testing\n- `category_id`: Sample category ID for testing\n- `comment_id`: Sample comment ID for testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "blogcms-api"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "post_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "comment_id",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', response.data.access_token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.access_token) {",
                  "        pm.collectionVariables.set('access_token', response.data.access_token);",
                  "        pm.collectionVariables.set('user_id', response.data.user.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"your_refresh_token_here\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Posts",
      "item": [
        {
          "name": "Get All Posts",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/posts?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["posts"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "category_id",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Post by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/posts/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["posts", "{{post_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get Post by Slug",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/posts/slug/getting-started-with-go",
              "host": ["{{base_url}}"],
              "path": ["posts", "slug", "getting-started-with-go"]
            }
          },
          "response": []
        },
        {
          "name": "Create Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('post_id', response.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Getting Started with Go\",\n  \"content\": \"This is a comprehensive guide to getting started with Go programming language. Go is a statically typed, compiled programming language designed at Google.\",\n  \"excerpt\": \"Learn the basics of Go programming language\",\n  \"category_id\": 1,\n  \"tags\": [\"golang\", \"programming\", \"tutorial\"],\n  \"status\": \"published\",\n  \"featured_image\": \"https://example.com/go-tutorial.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/posts",
              "host": ["{{base_url}}"],
              "path": ["posts"]
            }
          },
          "response": []
        },
        {
          "name": "Update Post",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Getting Started with Go (Updated)\",\n  \"content\": \"This is an updated comprehensive guide to getting started with Go programming language. Go is a powerful, statically typed, compiled programming language designed at Google.\",\n  \"excerpt\": \"Learn the basics of Go programming language - Updated version\",\n  \"category_id\": 1,\n  \"tags\": [\"golang\", \"programming\", \"tutorial\", \"updated\"],\n  \"status\": \"published\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/posts/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["posts", "{{post_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Post",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/posts/{{post_id}}",
              "host": ["{{base_url}}"],
              "path": ["posts", "{{post_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            }
          },
          "response": []
        },
        {
          "name": "Get Category by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('category_id', response.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Programming\",\n  \"description\": \"Articles about programming and software development\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/categories",
              "host": ["{{base_url}}"],
              "path": ["categories"]
            }
          },
          "response": []
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Programming & Development\",\n  \"description\": \"Updated description for programming and software development articles\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Category",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["categories", "{{category_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Get All Comments (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["comments"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "approved",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comments for Post",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments/post/{{post_id}}?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["comments", "post", "{{post_id}}"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.id) {",
                  "        pm.collectionVariables.set('comment_id', response.data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Great article! Very helpful and well explained.\",\n  \"post_id\": {{post_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments",
              "host": ["{{base_url}}"],
              "path": ["comments"]
            }
          },
          "response": []
        },
        {
          "name": "Update Comment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated comment content - still a great article!\",\n  \"approved\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{comment_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Approve Comment (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{comment_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments/{{comment_id}}",
              "host": ["{{base_url}}"],
              "path": ["comments", "{{comment_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get Current User Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe Updated\",\n  \"bio\": \"Software developer and technical blogger passionate about Go and web development\",\n  \"avatar\": \"https://example.com/new-avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/profile",
              "host": ["{{base_url}}"],
              "path": ["users", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "role",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane@example.com\",\n  \"role\": \"admin\",\n  \"bio\": \"System administrator and content moderator\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User (Admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["users", "{{user_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Documentation & Health",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../health",
              "host": ["{{base_url}}"],
              "path": ["..", "health"]
            }
          },
          "response": []
        },
        {
          "name": "Documentation Health",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/docs/health",
              "host": ["{{base_url}}"],
              "path": ["docs", "health"]
            }
          },
          "response": []
        },
        {
          "name": "Get OpenAPI Specification",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/docs/openapi.yaml",
              "host": ["{{base_url}}"],
              "path": ["docs", "openapi.yaml"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
