openapi: 3.0.3
info:
  title: BlogCMS API
  description: |
    A comprehensive Blog Content Management System API built with Go and Gin framework.
    
    This API provides complete functionality for managing blog posts, categories, comments, and users
    with role-based access control and JWT authentication.
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are rate limited to prevent abuse. Current limits:
    - Public endpoints: 100 requests per minute
    - Authenticated endpoints: 200 requests per minute
    
    ## Error Handling
    All endpoints return consistent error responses with appropriate HTTP status codes.
  version: 1.0.0
  contact:
    name: BlogCMS Support
    email: support@blogcms.com
    url: https://github.com/edwinfebrianto44-gif/go-vue-blogcms
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.blogcms.com/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              user_registration:
                summary: User registration
                value:
                  name: "John Doe"
                  email: "john@example.com"
                  password: "SecurePass123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: Successful registration
                  value:
                    status: "success"
                    message: "User registered successfully"
                    data:
                      user:
                        id: 1
                        name: "John Doe"
                        email: "john@example.com"
                        role: "user"
                        created_at: "2025-09-01T10:00:00Z"
                      access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              user_login:
                summary: User login
                value:
                  email: "john@example.com"
                  password: "SecurePass123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
            examples:
              refresh_token:
                summary: Refresh token
                value:
                  refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session and tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                success:
                  summary: Successful logout
                  value:
                    status: "success"
                    message: "Logged out successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Posts Endpoints
  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      description: Retrieve a paginated list of posts with optional filtering
      security: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of posts per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by post status
          schema:
            type: string
            enum: [published, draft]
        - name: author_id
          in: query
          description: Filter by author ID
          schema:
            type: integer
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
      responses:
        '200':
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new blog post (requires authentication)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostFormRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post by ID
      description: Retrieve a single post by its ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Posts
      summary: Update post
      description: Update an existing post (requires authentication and ownership)
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Posts
      summary: Delete post
      description: Delete a post (requires authentication and ownership)
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/slug/{slug}:
    get:
      tags:
        - Posts
      summary: Get post by slug
      description: Retrieve a single post by its slug
      security: []
      parameters:
        - name: slug
          in: path
          required: true
          description: Post slug
          schema:
            type: string
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Categories Endpoints
  /categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve all categories
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Categories
      summary: Create a new category
      description: Create a new category (requires admin privileges)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a single category by its ID
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Categories
      summary: Update category
      description: Update an existing category (requires admin privileges)
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category (requires admin privileges)
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Comments Endpoints
  /comments:
    get:
      tags:
        - Comments
      summary: Get all comments
      description: Retrieve all comments with pagination (admin only)
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of comments per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: approved
          in: query
          description: Filter by approval status
          schema:
            type: boolean
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Comments
      summary: Create a new comment
      description: Create a new comment on a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /comments/post/{post_id}:
    get:
      tags:
        - Comments
      summary: Get comments for a post
      description: Retrieve all approved comments for a specific post
      security: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of comments per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /comments/{id}:
    put:
      tags:
        - Comments
      summary: Update comment
      description: Update comment content or approval status
      parameters:
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Comments
      summary: Delete comment
      description: Delete a comment (admin or comment author)
      parameters:
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Users Endpoints
  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get current user's profile information
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users (admin only)
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [admin, user]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account (admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 100
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "SecurePass123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          example: "SecurePass123"

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Token refreshed successfully"
        data:
          type: object
          properties:
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [admin, user]
          example: "user"
        avatar:
          type: string
          nullable: true
          example: "https://example.com/avatar.jpg"
        bio:
          type: string
          nullable: true
          example: "Software developer and blogger"
        created_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        bio:
          type: string
          maxLength: 500
          example: "Software developer and blogger"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 100
          example: "john@example.com"
        role:
          type: string
          enum: [admin, user]
          example: "user"
        bio:
          type: string
          maxLength: 500
          example: "Software developer and blogger"
        avatar:
          type: string
          example: "https://example.com/avatar.jpg"

    UserResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "User retrieved successfully"
        data:
          $ref: '#/components/schemas/User'

    UsersResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Users retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Post Schemas
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Getting Started with Go"
        slug:
          type: string
          example: "getting-started-with-go"
        content:
          type: string
          example: "This is a comprehensive guide to getting started with Go programming language..."
        excerpt:
          type: string
          nullable: true
          example: "Learn the basics of Go programming language"
        featured_image:
          type: string
          nullable: true
          example: "https://example.com/featured-image.jpg"
        status:
          type: string
          enum: [published, draft]
          example: "published"
        views:
          type: integer
          example: 150
        author:
          $ref: '#/components/schemas/User'
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            type: string
          example: ["golang", "programming", "tutorial"]
        created_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"

    CreatePostRequest:
      type: object
      required:
        - title
        - content
        - category_id
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Getting Started with Go"
        content:
          type: string
          minLength: 1
          example: "This is a comprehensive guide to getting started with Go programming language..."
        excerpt:
          type: string
          maxLength: 500
          example: "Learn the basics of Go programming language"
        featured_image:
          type: string
          example: "https://example.com/featured-image.jpg"
        category_id:
          type: integer
          example: 1
        tags:
          type: array
          items:
            type: string
          example: ["golang", "programming", "tutorial"]
        status:
          type: string
          enum: [published, draft]
          default: "draft"
          example: "published"

    CreatePostFormRequest:
      type: object
      required:
        - title
        - content
        - category_id
      properties:
        title:
          type: string
          example: "Getting Started with Go"
        content:
          type: string
          example: "This is a comprehensive guide..."
        excerpt:
          type: string
          example: "Learn the basics of Go"
        category_id:
          type: integer
          example: 1
        tags:
          type: string
          example: "golang,programming,tutorial"
        status:
          type: string
          enum: [published, draft]
          example: "published"
        featured_image:
          type: string
          format: binary

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "Getting Started with Go (Updated)"
        content:
          type: string
          minLength: 1
          example: "This is an updated comprehensive guide..."
        excerpt:
          type: string
          maxLength: 500
          example: "Learn the basics of Go programming language"
        featured_image:
          type: string
          example: "https://example.com/featured-image.jpg"
        category_id:
          type: integer
          example: 1
        tags:
          type: array
          items:
            type: string
          example: ["golang", "programming", "tutorial", "updated"]
        status:
          type: string
          enum: [published, draft]
          example: "published"

    PostResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Post retrieved successfully"
        data:
          $ref: '#/components/schemas/Post'

    PostsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Posts retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Category Schemas
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Programming"
        slug:
          type: string
          example: "programming"
        description:
          type: string
          nullable: true
          example: "Articles about programming and software development"
        post_count:
          type: integer
          example: 25
        created_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Programming"
        description:
          type: string
          maxLength: 500
          example: "Articles about programming and software development"

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Programming"
        description:
          type: string
          maxLength: 500
          example: "Articles about programming and software development"

    CategoryResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Category retrieved successfully"
        data:
          $ref: '#/components/schemas/Category'

    CategoriesResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Categories retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    # Comment Schemas
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: "Great article! Very helpful."
        approved:
          type: boolean
          example: true
        author:
          $ref: '#/components/schemas/User'
        post_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-01T10:00:00Z"

    CreateCommentRequest:
      type: object
      required:
        - content
        - post_id
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 1000
          example: "Great article! Very helpful."
        post_id:
          type: integer
          example: 1

    UpdateCommentRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 1000
          example: "Updated comment content"
        approved:
          type: boolean
          example: true

    CommentResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Comment retrieved successfully"
        data:
          $ref: '#/components/schemas/Comment'

    CommentsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Comments retrieved successfully"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Common Schemas
    MessageResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "An error occurred"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validation_error:
              summary: Validation error
              value:
                status: "error"
                message: "Validation failed"
                errors:
                  - field: "email"
                    message: "Email is required"
                  - field: "password"
                    message: "Password must be at least 6 characters"

    Unauthorized:
      description: Unauthorized - Invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing_token:
              summary: Missing authentication token
              value:
                status: "error"
                message: "Authentication token required"
            invalid_token:
              summary: Invalid authentication token
              value:
                status: "error"
                message: "Invalid or expired token"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            insufficient_permissions:
              summary: Insufficient permissions
              value:
                status: "error"
                message: "Insufficient permissions to perform this action"

    NotFound:
      description: Not found - Resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            resource_not_found:
              summary: Resource not found
              value:
                status: "error"
                message: "Resource not found"

    Conflict:
      description: Conflict - Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            email_exists:
              summary: Email already exists
              value:
                status: "error"
                message: "Email already exists"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            server_error:
              summary: Internal server error
              value:
                status: "error"
                message: "Internal server error"

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Users
    description: User management and profile operations
  - name: Posts
    description: Blog post management and retrieval
  - name: Categories
    description: Category management for organizing posts
  - name: Comments
    description: Comment management and moderation
